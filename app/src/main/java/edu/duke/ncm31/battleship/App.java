/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ncm31.battleship;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;

public class App {
  public TextPlayer p1; // Player 1, 'A'
  public TextPlayer p2; // Player 2, 'B'
  public int p1_comp; // if p1 is a computer
  public int p2_comp; // if p2 is a computer

  public App(BufferedReader inputSource, PrintStream out){
    /**
     * Constructor, creating the board, input, and output streams.
     * @param inputSource contains the inputReader
     * @param out contains the output stream */
    Board<Character> b1 = new BattleShipBoard<Character>(10, 20, 'X');
    Board<Character> b2 = new BattleShipBoard<Character>(10, 20, 'X');
    V1ShipFactory factory = new V1ShipFactory();
    this.p1 = new TextPlayer("A", b1, inputSource, out, factory);
    this.p2 = new TextPlayer("B", b2, inputSource, out, factory);
    p1_comp = 0;
    p2_comp = 0;
  }

  public void doPlacementPhase() throws IOException{
    /** entire placement phase for both players using doPlacement method for 
     * both players */
    ByteArrayOutputStream bytes;
    if(p1.are_computer == 1){
      bytes = new ByteArrayOutputStream();
      BufferedReader input = new BufferedReader(new StringReader("A0V\nA1V\nA2V\nA3V\nA4V\nD0U\nD3U\nD6U\nI0U\nI5U\n")); // places all ships if player is a computer
      PrintStream output = new PrintStream(bytes, true);
      Board<Character> b1 = new BattleShipBoard<Character>(10, 20, 'X');
      V1ShipFactory factory = new V1ShipFactory();
      p1 = new TextPlayer("A", b1, input, output, factory);
      for(String temp : p1.shipsToPlace){
        p1.doOnePlacement(temp, p1.shipCreationFns.get(temp)); // runs placements given StringReader
        bytes.reset();
      }
    }
    else{
      // else if player is not a computer, run regular placement phase
      String begining_text = "Player A: you are going to place the following ships (which are all\n" +
        "rectangular). For each ship, type the coordinate of the upper left\n" +
        "side of the ship, followed by either H (for horizontal) or V (for\n" +
        "vertical). For example M4H would place a ship horizontally starting\n" +
        "at M4 and going to the right. You have\n\n" +
        "2 'Submarines' ships that are 1x2\n" +
        "3 'Destroyers' that are 1x3\n" +
        "3 'Battleships' that are unique\n" +
        "2 'Carriers' that are unique\n" +
        "P.S. for Battleships and Carriers, do not use V or H, but instead\n" +
        "L (for left), R (for right), D (for down), or U (for up)\n";
      System.out.println(begining_text);
      for(String temp : p1.shipsToPlace){
        p1.doOnePlacement(temp, p1.shipCreationFns.get(temp));
      }
    }
    /* after player 1 is finished, onto player 2 */
    if(p2.are_computer == 1){
      bytes = new ByteArrayOutputStream();
      BufferedReader input = new BufferedReader(new StringReader("A0V\nA1V\nA2V\nA3V\nA4V\nD0U\nD3U\nD6U\nI0U\nI5U\n")); // places all ships if player is a computer
      PrintStream output = new PrintStream(bytes, true);
      Board<Character> b1 = new BattleShipBoard<Character>(10, 20, 'X');
      V1ShipFactory factory = new V1ShipFactory();
      p2 = new TextPlayer("B", b1, input, output, factory);
      for(String temp : p2.shipsToPlace){
        p2.doOnePlacement(temp, p2.shipCreationFns.get(temp)); // runs placements given StringReader input
        bytes.reset();
      }
    }
    else{
      // else if NOT a computer run regular placement phase
      String begining_text = "Player B: you are going to place the following ships (which are all\n" +
        "rectangular). For each ship, type the coordinate of the upper left\n" +
        "side of the ship, followed by either H (for horizontal) or V (for\n" +
        "vertical). For example M4H would place a ship horizontally starting\n" +
        "at M4 and going to the right. You have\n\n" +
        "2 'Submarines' ships that are 1x2\n" +
        "3 'Destroyers' that are 1x3\n" +
        "3 'Battleships' that are unique\n" +
        "2 'Carriers' that are unique\n" +
        "P.S. for Battleships and Carriers, do not use V or H, but instead\n" +
        "L (for left), R (for right), D (for down), or U (for up)\n";
      System.out.println(begining_text);
      // cycle through ships to place and place them after taking user input
      for(String temp : p2.shipsToPlace){
        p2.doOnePlacement(temp, p2.shipCreationFns.get(temp));
      }
    }
  }

  public void doAttackingPhase() throws IOException{
    /** this method is the attacking phase of the game
     * it will display both boards and ask each player to attack a coordinate.
     * This will rotate until all of a player's ships have sunk. */
    int which_player_flag = 0;
    while(p1.theBoard.check_if_won() == false && p2.theBoard.check_if_won() == false){
      if(which_player_flag == 0){
        if(p1_comp == 1){
          /** if player is a computer Fire at a random coordinate */
          int random_row = (int)Math.floor(Math.random()*20);
          int random_column = (int)Math.floor(Math.random()*10);
          Coordinate fire = new Coordinate(random_row, random_column);
          if(p2.theBoard.fireAt(fire) != null) System.out.println("Player A hit your " + p2.theBoard.fireAt(fire).getName() + "!");
          else System.out.println("Player A missed!");
        }
        else{
          // else if not a computer, run playOneTurn method
          p1.playOneTurn(p2.theBoard, p2.view, 'A');
        }
        which_player_flag = 1; // switch between player turns
      }
      if(p1.theBoard.check_if_won() == true || p2.theBoard.check_if_won() == true) continue;
      if(which_player_flag == 1){
        if(p2_comp == 1){
          int random_row = (int)Math.floor(Math.random()*20);
          int random_column = (int)Math.floor(Math.random()*10);
          Coordinate fire = new Coordinate(random_row, random_column);
          if(p1.theBoard.fireAt(fire) != null) System.out.println("Player B hit your " + p1.theBoard.fireAt(fire).getName() + "!");
          else System.out.println("Player B missed!");
        }
        else{
          p2.playOneTurn(p1.theBoard, p1.view, 'B');
        }
        which_player_flag = 0;
      }
    }
    if(p1.theBoard.check_if_won() == true){ // if someone won, check who won!
      System.out.println("Player B won!\n"); 
    }
    else System.out.println("Player A won!\n");
  }
  
  public void doOnePlacement() throws IOException{
  }

  public void typeOfGame() throws IOException{
    System.out.println("Player A, are you a computer? Enter '1' for YES, or '0' for NO");
    // read the type of game BEFORE game starts
    String in = p2.inputReader.readLine();
    while(!in.equals("0") && !in.equals("1")){
      System.out.println("Please enter a '0' or '1'");
      in = p2.inputReader.readLine();
    }
    if(in.equals("0")) p1.are_computer = 0; // set player computer statuses
    else {
      p1.are_computer = 1; // this is uses in the TexPlayer class methods
      p1_comp = 1;
    }
    System.out.println("Player B, are you a computer? Enter '1' for YES, or '0' for NO");
    in = p2.inputReader.readLine();
    while(!in.equals("0") && !in.equals("1")){
      System.out.println("Please enter a '0' or '1'");
      in = p2.inputReader.readLine();
    }
    if(in.equals("0")) p2.are_computer = 0;
    else {
      p2_comp = 1;
      p2.are_computer = 1;
    }
  }
  
  public static void main(String[] args) throws IOException{
    /** 
     * Main method declares the input and sends it to readPlacement and doOnePlacement
     * to print out new updated Board */
    App new_app = new App(new BufferedReader(new InputStreamReader(System.in)), System.out);

    // run phases of the game!
    new_app.typeOfGame();
    new_app.doPlacementPhase();
    new_app.doAttackingPhase();
  }
}
